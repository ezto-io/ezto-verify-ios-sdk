// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name EztoVerify
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AuthenticationServices
import Combine
import CommonCrypto
import CoreLocation
import CryptoKit
@_exported import EztoVerify
import Foundation
import LocalAuthentication
import Network
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import iProov
@_inheritsConvenienceInitializers @objc(EztoVerifyApp) @_Concurrency.MainActor @preconcurrency public class EztoVerifyApp : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public func sdkInit(with eztoVerifyService: any EztoVerify.EztoVerifyService, forceUpdate: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func onPushReceived(data: [Swift.AnyHashable : Any], with eztoVerifyService: any EztoVerify.EztoVerifyService, encryptionKey: Swift.String?)
  @objc @_Concurrency.MainActor @preconcurrency public func launchQrScanner(with eztoVerifyService: any EztoVerify.EztoVerifyService, encryptionKey: Swift.String?)
  @objc @_Concurrency.MainActor @preconcurrency public func onDeeplinkRequest(with eztoVerifyService: any EztoVerify.EztoVerifyService, url: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(EztoVerifyService) public protocol EztoVerifyService {
  @objc func onPushTokenRequest() -> Swift.String?
  @objc func onResult(reqId: Swift.String, authReqId: Swift.String)
  @objc func onError(error: Swift.String)
  @objc func onClosed(reason: Swift.String)
  @objc func onTransactionRequest(payload: Any)
}
